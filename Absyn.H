#ifndef ABSYN_HEADER
#define ABSYN_HEADER

#include<string>
#include<vector>

//C++ Abstract Syntax Interface generated by the BNF Converter.

/********************   TypeDef Section    ********************/

typedef int Integer;
typedef char Char;
typedef double Double;
typedef std::string String;
typedef std::string Ident;




/********************   Forward Declarations    ********************/

class Program;
class Decl;
class Predicate;
class Literal;
class Action;
class Prg;
class Def;
class Exec;
class Caus;
class CausCond;
class Init;
class Final;
class Preds;
class Pred;
class LitN;
class Lit;
class Acts;
class Act;
class ListLiteral;
class ListIdent;
class ListDecl;


/********************   Visitor Interfaces    ********************/
class Visitor
{
public:
  virtual ~Visitor() {}
  virtual void visitProgram(Program *p) = 0;
  virtual void visitDecl(Decl *p) = 0;
  virtual void visitPredicate(Predicate *p) = 0;
  virtual void visitLiteral(Literal *p) = 0;
  virtual void visitAction(Action *p) = 0;
  virtual void visitPrg(Prg *p) = 0;
  virtual void visitDef(Def *p) = 0;
  virtual void visitExec(Exec *p) = 0;
  virtual void visitCaus(Caus *p) = 0;
  virtual void visitCausCond(CausCond *p) = 0;
  virtual void visitInit(Init *p) = 0;
  virtual void visitFinal(Final *p) = 0;
  virtual void visitPreds(Preds *p) = 0;
  virtual void visitPred(Pred *p) = 0;
  virtual void visitLitN(LitN *p) = 0;
  virtual void visitLit(Lit *p) = 0;
  virtual void visitActs(Acts *p) = 0;
  virtual void visitAct(Act *p) = 0;
  virtual void visitListLiteral(ListLiteral *p) = 0;
  virtual void visitListIdent(ListIdent *p) = 0;
  virtual void visitListDecl(ListDecl *p) = 0;


  virtual void visitInteger(Integer x) = 0;
  virtual void visitChar(Char x) = 0;
  virtual void visitDouble(Double x) = 0;
  virtual void visitString(String x) = 0;
  virtual void visitIdent(Ident x) = 0;

};


class Visitable
{
 public:
  virtual ~Visitable() {}
  virtual void accept(Visitor *v) = 0;
};


/********************   Abstract Syntax Classes    ********************/

class Program : public Visitable
{
public:
  virtual Program *clone() const = 0;

};

class Decl : public Visitable
{
public:
  virtual Decl *clone() const = 0;

};

class Predicate : public Visitable
{
public:
  virtual Predicate *clone() const = 0;

};

class Literal : public Visitable
{
public:
  virtual Literal *clone() const = 0;

};

class Action : public Visitable
{
public:
  virtual Action *clone() const = 0;

};



class Prg : public Program
{
public:
  ListDecl *listdecl_;

  Prg(const Prg &);
  Prg &operator=(const Prg &);
  Prg(ListDecl *p1);
  ~Prg();
  virtual void accept(Visitor *v);
  virtual Prg *clone() const;
  void swap(Prg &);
};

class Def : public Decl
{
public:
  Ident ident_1;
  Ident ident_2;

  Def(const Def &);
  Def &operator=(const Def &);
  Def(Ident p1, Ident p2);
  ~Def();
  virtual void accept(Visitor *v);
  virtual Def *clone() const;
  void swap(Def &);
};

class Exec : public Decl
{
public:
  Action *action_;
  ListLiteral *listliteral_;

  Exec(const Exec &);
  Exec &operator=(const Exec &);
  Exec(Action *p1, ListLiteral *p2);
  ~Exec();
  virtual void accept(Visitor *v);
  virtual Exec *clone() const;
  void swap(Exec &);
};

class Caus : public Decl
{
public:
  Action *action_;
  ListLiteral *listliteral_;

  Caus(const Caus &);
  Caus &operator=(const Caus &);
  Caus(Action *p1, ListLiteral *p2);
  ~Caus();
  virtual void accept(Visitor *v);
  virtual Caus *clone() const;
  void swap(Caus &);
};

class CausCond : public Decl
{
public:
  Action *action_;
  ListLiteral *listliteral_1;
  ListLiteral *listliteral_2;

  CausCond(const CausCond &);
  CausCond &operator=(const CausCond &);
  CausCond(Action *p1, ListLiteral *p2, ListLiteral *p3);
  ~CausCond();
  virtual void accept(Visitor *v);
  virtual CausCond *clone() const;
  void swap(CausCond &);
};

class Init : public Decl
{
public:
  Literal *literal_;

  Init(const Init &);
  Init &operator=(const Init &);
  Init(Literal *p1);
  ~Init();
  virtual void accept(Visitor *v);
  virtual Init *clone() const;
  void swap(Init &);
};

class Final : public Decl
{
public:
  Literal *literal_;

  Final(const Final &);
  Final &operator=(const Final &);
  Final(Literal *p1);
  ~Final();
  virtual void accept(Visitor *v);
  virtual Final *clone() const;
  void swap(Final &);
};

class Preds : public Predicate
{
public:
  Ident ident_;
  ListIdent *listident_;

  Preds(const Preds &);
  Preds &operator=(const Preds &);
  Preds(Ident p1, ListIdent *p2);
  ~Preds();
  virtual void accept(Visitor *v);
  virtual Preds *clone() const;
  void swap(Preds &);
};

class Pred : public Predicate
{
public:
  Ident ident_;

  Pred(const Pred &);
  Pred &operator=(const Pred &);
  Pred(Ident p1);
  ~Pred();
  virtual void accept(Visitor *v);
  virtual Pred *clone() const;
  void swap(Pred &);
};

class LitN : public Literal
{
public:
  Predicate *predicate_;

  LitN(const LitN &);
  LitN &operator=(const LitN &);
  LitN(Predicate *p1);
  ~LitN();
  virtual void accept(Visitor *v);
  virtual LitN *clone() const;
  void swap(LitN &);
};

class Lit : public Literal
{
public:
  Predicate *predicate_;

  Lit(const Lit &);
  Lit &operator=(const Lit &);
  Lit(Predicate *p1);
  ~Lit();
  virtual void accept(Visitor *v);
  virtual Lit *clone() const;
  void swap(Lit &);
};

class Acts : public Action
{
public:
  Ident ident_;
  ListIdent *listident_;

  Acts(const Acts &);
  Acts &operator=(const Acts &);
  Acts(Ident p1, ListIdent *p2);
  ~Acts();
  virtual void accept(Visitor *v);
  virtual Acts *clone() const;
  void swap(Acts &);
};

class Act : public Action
{
public:
  Ident ident_;

  Act(const Act &);
  Act &operator=(const Act &);
  Act(Ident p1);
  ~Act();
  virtual void accept(Visitor *v);
  virtual Act *clone() const;
  void swap(Act &);
};



class ListLiteral : public Visitable, public std::vector<Literal*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListLiteral *clone() const;
};

class ListIdent : public Visitable, public std::vector<Ident>
{
public:
  virtual void accept(Visitor *v);
  virtual ListIdent *clone() const;
};

class ListDecl : public Visitable, public std::vector<Decl*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListDecl *clone() const;
};



#endif
